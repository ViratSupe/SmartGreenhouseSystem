#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <WebServer.h>
#include "DHT.h"

// Wi-Fi credentials
const char* ssid = "Proj";       // Replace with your Wi-Fi SSID
const char* password = "11111110"; // Replace with your Wi-Fi Password

// Relay Pins
#define LED_RELAY_PIN 27        // LED relay
#define WATER_PUMP_RELAY_PIN 26 // Water pump relay

// Soil Moisture Sensor
#define SOIL_MOISTURE_PIN 32

// LDR Sensor
#define LDR_PIN 35

// DHT Sensor
#define DHT_PIN 23
#define DHTTYPE DHT11

// LCD I2C
LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD at I2C address 0x27

DHT dht(DHT_PIN, DHTTYPE);

// Web server on port 80
WebServer server(80);

// Soil moisture threshold to automatically turn on the water pump
#define SOIL_MOISTURE_THRESHOLD 40  // Soil moisture below 40% triggers pump

// Define a struct for sensor data
struct SensorData {
    int soilMoisture;
    int ldr;
    float temperature;
    float humidity;
};

// Map and reverse sensor values to 1-100
int mapSensorValue(int rawValue, bool reverse = false) {
    int mappedValue = map(rawValue, 0, 4095, 1, 100); // Scale rawValue to 1-100
    return reverse ? 100 - mappedValue : mappedValue;
}

// Function to read all sensor data
SensorData readSensors() {
    SensorData data;
    data.soilMoisture = mapSensorValue(analogRead(SOIL_MOISTURE_PIN), true);
    data.ldr = mapSensorValue(analogRead(LDR_PIN), true);
    data.temperature = dht.readTemperature();
    data.humidity = dht.readHumidity();

    if (isnan(data.temperature)) data.temperature = 0; // Handle errors
    if (isnan(data.humidity)) data.humidity = 0;

    return data;
}

// Handler for the main web page
void handleRoot() {
    String html = "<!DOCTYPE html><html><head>";
    html += "<style>";
    html += "body { font-family: Arial, sans-serif; background-color: #f4f4f9; color: #333; text-align: center; padding: 20px; }";
    html += "h1 { color: #444; }";
    html += ".container { max-width: 800px; margin: 0 auto; background: #fff; border-radius: 10px; padding: 20px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); }";
    html += ".gauge-container { margin: 20px 0; }";
    html += ".gauge { width: 100%; background: #e0e0e0; border-radius: 10px; overflow: hidden; position: relative; height: 30px; }";
    html += ".gauge-fill { height: 100%; background: linear-gradient(90deg, #ff6a6a, #ffc837, #44c8a1); width: 0%; text-align: center; color: white; line-height: 30px; border-radius: 10px; }";
    html += "button { background-color: #008CBA; color: white; border: none; padding: 10px 20px; font-size: 16px; cursor: pointer; border-radius: 5px; margin: 10px; }";
    html += "button:hover { background-color: #005f6a; }";
    html += "</style>";
    
    html += "<script>";
    html += "function fetchData() {";
    html += "fetch('/data').then(response => response.json()).then(data => {";
    html += "document.getElementById('soilMoistureFill').style.width = data.soilMoisture + '%';";
    html += "document.getElementById('soilMoistureFill').innerText = data.soilMoisture + '%';";
    html += "document.getElementById('ldrFill').style.width = data.ldr + '%';";
    html += "document.getElementById('ldrFill').innerText = data.ldr + '%';";
    html += "document.getElementById('tempFill').style.width = data.temperature + '%';";
    html += "document.getElementById('tempFill').innerText = data.temperature + '°C';";
    html += "document.getElementById('humidityFill').style.width = data.humidity + '%';";
    html += "document.getElementById('humidityFill').innerText = data.humidity + '%';";
    html += "});";
    html += "}"; 
    html += "setInterval(fetchData, 1000);"; // Fetch data every 1 second
    html += "</script>";
    
    html += "</head><body onload='fetchData()'>";
    html += "<div class='container'>";
    html += "<h1>ESP32 Control Panel</h1>";
    html += "<div class='gauge-container'>";
    html += "<p><b>Soil Moisture:</b></p>";
    html += "<div class='gauge'><div id='soilMoistureFill' class='gauge-fill'>0%</div></div>";
    html += "</div>";
    html += "<div class='gauge-container'>";
    html += "<p><b>Light Intensity (LDR):</b></p>";
    html += "<div class='gauge'><div id='ldrFill' class='gauge-fill'>0%</div></div>";
    html += "</div>";
    html += "<div class='gauge-container'>";
    html += "<p><b>Temperature:</b></p>";
    html += "<div class='gauge'><div id='tempFill' class='gauge-fill'>0°C</div></div>";
    html += "</div>";
    html += "<div class='gauge-container'>";
    html += "<p><b>Humidity:</b></p>";
    html += "<div class='gauge'><div id='humidityFill' class='gauge-fill'>0%</div></div>";
    html += "</div>";
    html += "<p><a href='/pump_on'><button>Turn ON Water Pump</button></a>";
    html += "<a href='/pump_off'><button>Turn OFF Water Pump</button></a></p>";
    html += "<p><a href='/led_on'><button>Turn ON LED</button></a>";
    html += "<a href='/led_off'><button>Turn OFF LED</button></a></p>";
    html += "</div>";
    html += "</body></html>";

    server.send(200, "text/html", html);
}

// Handler for serving sensor data in JSON format
void handleData() {
    SensorData data = readSensors();
    String json = "{";
    json += "\"soilMoisture\":" + String(data.soilMoisture) + ","; 
    json += "\"ldr\":" + String(data.ldr) + ","; 
    json += "\"temperature\":" + String(data.temperature) + ","; 
    json += "\"humidity\":" + String(data.humidity); 
    json += "}"; 

    server.send(200, "application/json", json);
}

// Handler to turn the water pump ON
void handlePumpOn() {
    digitalWrite(WATER_PUMP_RELAY_PIN, LOW); // Turn relay ON (active LOW)
    server.send(200, "text/html", "Water Pump is ON<br><a href='/'>Go Back</a>");
}

// Handler to turn the water pump OFF
void handlePumpOff() {
    digitalWrite(WATER_PUMP_RELAY_PIN, HIGH); // Turn relay OFF (active LOW)
    server.send(200, "text/html", "Water Pump is OFF<br><a href='/'>Go Back</a>");
}

// Handler to turn the LED ON
void handleLedOn() {
    digitalWrite(LED_RELAY_PIN, LOW); // Turn relay ON (active LOW)
    server.send(200, "text/html", "LED is ON<br><a href='/'>Go Back</a>");
}

// Handler to turn the LED OFF
void handleLedOff() {
    digitalWrite(LED_RELAY_PIN, HIGH); // Turn relay OFF (active LOW)
    server.send(200, "text/html", "LED is OFF<br><a href='/'>Go Back</a>");
}

// Function to automatically control the water pump based on soil moisture
void controlWaterPump(int soilMoisture) {
    if (soilMoisture < SOIL_MOISTURE_THRESHOLD) {
        digitalWrite(WATER_PUMP_RELAY_PIN, LOW);  // Turn ON water pump (active LOW)
    } else {
        digitalWrite(WATER_PUMP_RELAY_PIN, HIGH); // Turn OFF water pump (active LOW)
    }
}

// Function to automatically control the LED based on LDR (light intensity)
void controlLED(int ldr) {
    if (ldr < 50) {  // If LDR value is less than 50% (low light)
        digitalWrite(LED_RELAY_PIN, LOW);  // Turn ON LED (active LOW)
    } else {
        digitalWrite(LED_RELAY_PIN, HIGH); // Turn OFF LED (active LOW)
    }
}

void setup() {
    // Start Serial Monitor
    Serial.begin(115200);

    // Initialize DHT sensor
    dht.begin();

    // Initialize LCD
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Initializing...");
    delay(2000);

    // Set up relay pins
    pinMode(LED_RELAY_PIN, OUTPUT);
    digitalWrite(LED_RELAY_PIN, HIGH); // Ensure the LED is OFF initially

    pinMode(WATER_PUMP_RELAY_PIN, OUTPUT);
    digitalWrite(WATER_PUMP_RELAY_PIN, HIGH); // Ensure the water pump is OFF initially

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    Serial.println(WiFi.localIP());

    // Start web server
    server.on("/", handleRoot);
    server.on("/data", handleData);
    server.on("/pump_on", handlePumpOn);   // Turn ON water pump
    server.on("/pump_off", handlePumpOff); // Turn OFF water pump
    server.on("/led_on", handleLedOn);     // Turn ON LED
    server.on("/led_off", handleLedOff);   // Turn OFF LED
    server.begin();
    Serial.println("Web server started!");
}

void loop() {
    server.handleClient(); // Handle web server requests

    // Read sensors
    SensorData data = readSensors();
    
    // Update LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("T:");
    lcd.print(data.temperature);
    lcd.print("C H:");
    lcd.print(data.humidity);

    lcd.setCursor(0, 1);
    lcd.print("Soil:");
    lcd.print(data.soilMoisture);
    lcd.setCursor(8, 1);
    lcd.print("LDR:");
    lcd.print(data.ldr);

    // Automatically control the water pump based on soil moisture
    controlWaterPump(data.soilMoisture);

    // Automatically control the LED based on LDR value
    controlLED(data.ldr);

    delay(1000); // Update LCD every second 
}
